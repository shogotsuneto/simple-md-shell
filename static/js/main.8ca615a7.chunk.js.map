{"version":3,"sources":["components/Header.js","components/TableOfContents.js","components/contents/Section.js","components/contents/Heading.js","components/contents/Tree.js","processor/parseMarkdown.js","components/Container.js","App.js","serviceWorker.js","index.js","styles/Shell.module.css","styles/Contents.module.css"],"names":["Header","className","styles","header","Item","data","onClick","name","TableOfContents","owner","repo","branch","setCurrent","useState","contents","setContents","useEffect","fetch","then","response","json","tableOfContents","map","item","key","sha","path","depth","children","React","createElement","components","root","Fragment","renderChildren","section","Section","heading","Heading","text","value","paragraph","ruby","base","break","node","index","Tree","type","unified","use","parse","remarkAozoraRuby","remarkBreaks","sectionize","freeze","Container","filepath","raw","setRaw","setNode","parseMarkdown","run","container","initialPath","App","current","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"+NAOeA,EAJA,kBACb,4BAAQC,UAAWC,IAAOC,QAA1B,mCCGIC,EAAO,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QACnB,OAAO,yBAAKA,QAASA,GAAS,2BAAID,EAAKE,QAc1BC,EAXS,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,WAAgB,EAC7BC,mBAAS,IADoB,mBACtDC,EADsD,KAC5CC,EAD4C,KAQ7D,OANAC,oBAAU,WACRC,MATS,yBASC,iBAAaR,EAAb,YAAsBC,EAAtB,yBAA2CC,IAClDO,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAb,GAAI,OAAIU,EAAYV,MAC3B,CAACI,EAAOC,EAAMC,IAEV,yBAAKV,UAAWC,IAAOmB,iBAAkBP,EAASQ,IAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAKE,IAAKpB,KAAMkB,EAAMjB,QAAS,kBAAMM,EAAWW,EAAKG,a,wBChBxH,kBAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OAAuB,6BAAS3B,UAAWC,IAAO,UAAD,OAAWyB,KAAWC,ICAvE,kBAAED,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OAAuBC,IAAMC,cAAN,WAAwBH,GAAS,CAAE1B,UAAWC,IAAO,UAAD,OAAWyB,KAAYC,I,4NCCjH,IAAMG,EAAa,CACjBC,KAAM,gBAAEJ,EAAF,EAAEA,SAAF,OAAgB,kBAAC,IAAMK,SAAP,KAAiBC,EAAeN,KACtDO,QAAS,gBAAER,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OAAuB,kBAACQ,EAAD,CAAST,MAAOA,GAAQO,EAAeN,KACvES,QAAS,gBAAEV,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OAAuB,kBAACU,EAAD,CAASX,MAAOA,GAAQO,EAAeN,KACvEW,KAAM,gBAAEC,EAAF,EAAEA,MAAF,gBAAgBA,IACtBC,UAAW,gBAAEb,EAAF,EAAEA,SAAF,OAAgB,2BAAIM,EAAeN,KAC9Cc,KAAM,gBAAEC,EAAF,EAAEA,KAAMJ,EAAR,EAAQA,KAAR,OAAkB,8BAAOI,EAAK,4BAAKJ,KACzCK,MAAO,kBAAM,+BAGTV,EAAiB,SAAAN,GAAQ,OAAIA,EAASN,IAAI,SAACuB,EAAMC,GAAP,OAAiB,kBAAC,EAAD,CAAMtB,IAAG,UAAKsB,GAASD,KAAMA,OAExFE,EAAO,SAAC,GAAY,IAAXF,EAAU,EAAVA,KACb,OAAOd,EAAWc,EAAKG,MAAQnB,IAAMC,cAAcC,EAAWc,EAAKG,M,qVAApC,IAA+CH,IAAS,MAG1EE,I,qFCdAE,QACZC,IAAIC,KACJD,IAAIE,KACJF,IAAIG,KACJH,IAAII,KACJC,SCUYC,EAhBG,SAAC,GAAqC,IAApC/C,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,OAAQ8C,EAAc,EAAdA,SAAc,EAC/B5C,mBAAS,IADsB,mBAC9C6C,EAD8C,KACzCC,EADyC,OAE7B9C,mBAAS,IAFoB,mBAE9CgC,EAF8C,KAExCe,EAFwC,KAarD,OAVA5C,oBAAU,WACRC,MAAM,qCAAD,OAAsCR,EAAtC,YAA+CC,EAA/C,YAAuDC,EAAvD,YAAiE8C,IACnEvC,KAAK,SAAAC,GAAQ,OAAIA,EAASoB,SAC1BrB,KAAK,SAAAb,GAAI,OAAIsD,EAAOtD,MACtB,CAACI,EAAOC,EAAMC,EAAQ8C,IACzBzC,oBAAU,WACR6C,EAAcC,IAAID,EAAcV,MAAMO,IAAMxC,KAAK,SAAA2B,GAC/Ce,EAAQf,MAET,CAACa,IACG,yBAAKzD,UAAWC,IAAO6D,WAAW,kBAAC,EAAD,CAAMlB,KAAMA,MCXjDpC,G,OAAQ,gBACRC,EAAO,cACPC,EAAS,SACTqD,EAAc,YAaLC,MAXf,WAAgB,IAAD,EACiBpD,mBAASmD,GAD1B,mBACNE,EADM,KACGtD,EADH,KAEb,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAiBQ,MAAOA,EAAOC,KAAMA,EAAMC,OAAQA,EAAQC,WAAY,SAAAc,GAAI,OAAId,EAAWc,MAC1F,kBAAC,EAAD,CAAWjB,MAAOA,EAAOC,KAAMA,EAAMC,OAAQA,EAAQ8C,SAAUS,MCNjDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,KAAK,SAAA6D,GACjCA,EAAaC,gB,4EElInBC,EAAOC,QAAU,CAAC,OAAS,sBAAsB,UAAY,2B,kBCA7DD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,SAAW,2BAA2B,SAAW,2BAA2B,SAAW,2BAA2B,SAAW,2BAA2B,SAAW,8B","file":"static/js/main.8ca615a7.chunk.js","sourcesContent":["import React from 'react'\nimport styles from '../styles/Shell.module.css'\n\nconst Header = () => (\n  <header className={styles.header}>アプリだよ</header>\n)\n\nexport default Header","import React, { useState, useEffect } from 'react'\nimport styles from '../styles/Shell.module.css'\n\n// /repos/:owner/:repo/contents/:path\n\nconst base = 'https://api.github.com'\n\nconst Item = ({data, onClick}) => {\n  return <div onClick={onClick}><p>{data.name}</p></div>\n}\n\nconst TableOfContents = ({owner, repo, branch, setCurrent}) => {\n  const [contents, setContents] = useState([])\n  useEffect(() => {\n    fetch(base + `/repos/${owner}/${repo}/contents?ref=${branch}`)\n      .then(response => response.json())\n      .then(data => setContents(data))\n  }, [owner, repo, branch])\n\n  return <div className={styles.tableOfContents}>{contents.map(item => <Item key={item.sha} data={item} onClick={() => setCurrent(item.path)} />)}</div>\n}\n\nexport default TableOfContents","import React from 'react'\nimport styles from '../../styles/Contents.module.css'\n\nexport default ({depth, children}) => <section className={styles[`section${depth}`]}>{children}</section>\n","import React from 'react'\nimport styles from '../../styles/Contents.module.css'\n\nexport default ({depth, children}) => React.createElement(`h${depth}`, { className: styles[`heading${depth}`] }, children)\n","import React from 'react'\nimport Section from './Section'\nimport Heading from './Heading'\n\nconst components = {\n  root: ({children}) => <React.Fragment>{renderChildren(children)}</React.Fragment>,\n  section: ({depth, children}) => <Section depth={depth}>{renderChildren(children)}</Section>,\n  heading: ({depth, children}) => <Heading depth={depth}>{renderChildren(children)}</Heading>,\n  text: ({value}) => `${value}`,\n  paragraph: ({children}) => <p>{renderChildren(children)}</p>,\n  ruby: ({base, text}) => <ruby>{base}<rt>{text}</rt></ruby>,\n  break: () => <br />\n}\n\nconst renderChildren = children => children.map((node, index) => <Tree key={`${index}`} node={node} />)\n\nconst Tree = ({node}) => {\n  return components[node.type] ? React.createElement(components[node.type], {...node}) : null\n}\n\nexport default Tree","import unified from 'unified'\nimport parse from 'remark-parse'\nimport sectionize from 'remark-sectionize'\nimport remarkBreaks from 'remark-breaks'\nimport remarkAozoraRuby from 'remark-aozora-ruby'\n\nexport default unified()\n  .use(parse)\n  .use(remarkAozoraRuby)\n  .use(remarkBreaks)\n  .use(sectionize)\n  .freeze()","import React, { useState, useEffect } from 'react'\nimport Tree from './contents/Tree'\nimport parseMarkdown from '../processor/parseMarkdown'\nimport styles from '../styles/Shell.module.css'\n\nconst Container = ({owner, repo, branch, filepath}) => {\n  const [raw, setRaw] = useState('')\n  const [node, setNode] = useState({})\n  useEffect(() => {\n    fetch(`https://raw.githubusercontent.com/${owner}/${repo}/${branch}/${filepath}`)\n      .then(response => response.text())\n      .then(data => setRaw(data))\n  }, [owner, repo, branch, filepath])\n  useEffect(() => {\n    parseMarkdown.run(parseMarkdown.parse(raw)).then(node => {\n      setNode(node)\n    })\n  }, [raw])\n  return <div className={styles.container}><Tree node={node} /></div>\n}\n\nexport default Container\n","import React, { useState } from 'react';\n\nimport Header from './components/Header'\nimport TableOfContents from './components/TableOfContents';\nimport Container from './components/Container'\nimport './App.css';\n\nconst owner = \"shogotsuneto\"\nconst repo = \"md-contents\"\nconst branch = \"master\"\nconst initialPath = \"README.md\"\n\nfunction App() {\n  const [current, setCurrent] = useState(initialPath)\n  return (\n    <div className=\"App\">\n      <Header />\n      <TableOfContents owner={owner} repo={repo} branch={branch} setCurrent={path => setCurrent(path)} />\n      <Container owner={owner} repo={repo} branch={branch} filepath={current} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Shell_header__1vajR\",\"container\":\"Shell_container__lWg86\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading1\":\"Contents_heading1__334m9\",\"heading2\":\"Contents_heading2__1dxOo\",\"heading3\":\"Contents_heading3__2X29Z\",\"section1\":\"Contents_section1__3fcUK\",\"section2\":\"Contents_section2__263vx\",\"section3\":\"Contents_section3__yvlDa\"};"],"sourceRoot":""}