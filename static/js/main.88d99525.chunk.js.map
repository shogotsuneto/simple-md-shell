{"version":3,"sources":["styles/Shell.module.css","components/Header.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","styles","header","Container","owner","repo","useState","text","setText","useEffect","fetch","then","response","data","container","unified","use","parse","remarkAozoraRuby","remark2rehype","rehype2react","createElement","React","processSync","contents","createMarkDownElements","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,OAAS,sBAAsB,UAAY,2B,4HCM9CC,EAJA,kBACb,4BAAQC,UAAWC,IAAOC,QAA1B,mC,6FCuBaC,EAVG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KAAU,EACXC,mBAAS,IADE,mBAC5BC,EAD4B,KACtBC,EADsB,KAOnC,OALAC,oBAAU,WACRC,MAAM,qCAAD,OAAsCN,EAAtC,YAA+CC,EAA/C,sBACFM,KAAK,SAAAC,GAAQ,OAAIA,EAASL,SAC1BI,KAAK,SAAAE,GAAI,OAAIL,EAAQK,MACvB,CAACT,EAAOC,IACJ,yBAAKL,UAAWC,IAAOa,WAhBD,SAAAP,GAAI,OACjCQ,MACGC,IAAIC,KACJD,IAAIE,KACJF,IAAIG,KACJH,IAAII,IAAc,CAAEC,cAAeC,IAAMD,gBACzCE,YAAYhB,GAAMiB,SAUqBC,CAAuBlB,K,OCTpDmB,MATf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWI,MAAM,eAAeC,KAAK,kBCEvBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC,gB","file":"static/js/main.88d99525.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Shell_header__1vajR\",\"container\":\"Shell_container__lWg86\"};","import React from 'react'\nimport styles from '../styles/Shell.module.css'\n\nconst Header = () => (\n  <header className={styles.header}>アプリだよ</header>\n)\n\nexport default Header","import React, { useState, useEffect } from 'react'\nimport unified from 'unified'\nimport parse from 'remark-parse'\nimport remarkAozoraRuby from 'remark-aozora-ruby'\nimport remark2rehype from 'remark-rehype'\nimport rehype2react from 'rehype-react'\nimport styles from '../styles/Shell.module.css'\n\nconst createMarkDownElements = text => (\n  unified()\n    .use(parse)\n    .use(remarkAozoraRuby)\n    .use(remark2rehype)\n    .use(rehype2react, { createElement: React.createElement})\n    .processSync(text).contents\n)\n\nconst Container = ({owner, repo}) => {\n  const [text, setText] = useState('')\n  useEffect(() => {\n    fetch(`https://raw.githubusercontent.com/${owner}/${repo}/master/README.md`)\n      .then(response => response.text())\n      .then(data => setText(data))\n  }, [owner, repo])\n  return <div className={styles.container}>{createMarkDownElements(text)}</div>\n}\n\nexport default Container\n","import React from 'react';\n\nimport Header from './components/Header'\nimport Container from './components/Container'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Container owner='shogotsuneto' repo=\"md-contents\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}