{"version":3,"sources":["styles/Shell.module.css","components/Header.js","processor/createMd2React.js","components/Container.js","components/contents/section.js","App.js","serviceWorker.js","index.js","styles/Contents.module.css"],"names":["module","exports","Header","className","styles","header","schema","gh","tagNames","md2React","createElement","components","unified","use","parse","sectionize","remarkAozoraRuby","remarkBreaks","remark2rehype","sanitize","rehype2react","freeze","createMd2React","React","section","children","Container","owner","repo","useState","raw","setRaw","contents","setContents","useEffect","fetch","then","response","text","data","process","container","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,OAAS,sBAAsB,UAAY,2B,4HCM9CC,EAJA,kBACb,4BAAQC,UAAWC,IAAOC,QAA1B,mC,oYCMF,IAAMC,E,qVAAM,IAAQC,EAAR,CAAYC,SAAS,GAAD,mBAAMD,EAAGC,UAAT,CAAmB,c,iBCJ7CC,EDMS,gBAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,WAAlB,OACbC,MACGC,IAAIC,KACJD,IAAIE,KACJF,IAAIG,KACJH,IAAII,KACJJ,IAAIK,KACJL,IAAIM,IAAUb,GACdO,IAAIO,IAAc,CAAEV,gBAAeC,eACnCU,SCfYC,CAAe,CAAEZ,cAAea,IAAMb,cAAeC,WAAY,CAAEa,QCHrE,gBAAEC,EAAF,EAAEA,SAAF,OAAgB,6BAAStB,UAAWC,IAAOoB,SAAUC,ODmBrDC,EAdG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KAAU,EACbC,mBAAS,IADI,mBAC5BC,EAD4B,KACvBC,EADuB,OAEHF,mBAAS,MAFN,mBAE5BG,EAF4B,KAElBC,EAFkB,KAWnC,OARAC,oBAAU,WACRC,MAAM,qCAAD,OAAsCR,EAAtC,YAA+CC,EAA/C,sBACFQ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIR,EAAOQ,MACtB,CAACZ,EAAOC,IACXM,oBAAU,WACRzB,EAAS+B,QAAQV,GAAKM,KAAK,gBAAEJ,EAAF,EAAEA,SAAF,OAAgBC,EAAYD,MACtD,CAACF,IACG,yBAAK3B,UAAWC,IAAOqC,WAAYT,I,OEJ7BU,MATf,WACE,OACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWwB,MAAM,eAAeC,KAAK,kBCEvBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC,gB,mBElInBxD,EAAOC,QAAU,CAAC,QAAU,4B","file":"static/js/main.b39b7545.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Shell_header__1vajR\",\"container\":\"Shell_container__lWg86\"};","import React from 'react'\nimport styles from '../styles/Shell.module.css'\n\nconst Header = () => (\n  <header className={styles.header}>アプリだよ</header>\n)\n\nexport default Header","import unified from 'unified'\nimport parse from 'remark-parse'\nimport sectionize from 'remark-sectionize'\nimport remarkBreaks from 'remark-breaks'\nimport remarkAozoraRuby from 'remark-aozora-ruby'\nimport remark2rehype from 'remark-rehype'\nimport sanitize from 'rehype-sanitize'\nimport rehype2react from 'rehype-react'\nimport gh from 'hast-util-sanitize/lib/github'\n\nconst schema = { ...gh, tagNames: [...gh.tagNames, 'section']}\n\nexport default ({ createElement, components }) => (\n  unified()\n    .use(parse)\n    .use(sectionize)\n    .use(remarkAozoraRuby)\n    .use(remarkBreaks)\n    .use(remark2rehype)\n    .use(sanitize, schema)\n    .use(rehype2react, { createElement, components })\n    .freeze()\n)","import React, { useState, useEffect } from 'react'\nimport createMd2React from '../processor/createMd2React'\nimport styles from '../styles/Shell.module.css'\n\nimport section from './contents/section'\n\nconst md2React = createMd2React({ createElement: React.createElement, components: { section }})\n\nconst Container = ({owner, repo}) => {\n  const [raw, setRaw] = useState('')\n  const [contents, setContents] = useState(null)\n  useEffect(() => {\n    fetch(`https://raw.githubusercontent.com/${owner}/${repo}/master/kokoro.md`)\n      .then(response => response.text())\n      .then(data => setRaw(data))\n  }, [owner, repo])\n  useEffect(() => {\n    md2React.process(raw).then(({contents}) => setContents(contents))\n  }, [raw])\n  return <div className={styles.container}>{contents}</div>\n}\n\nexport default Container\n","import React from 'react'\nimport styles from '../../styles/Contents.module.css'\n\nexport default ({children}) => <section className={styles.section}>{children}</section>\n","import React from 'react';\n\nimport Header from './components/Header'\nimport Container from './components/Container'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Container owner='shogotsuneto' repo=\"md-contents\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Contents_section__1fSYR\"};"],"sourceRoot":""}