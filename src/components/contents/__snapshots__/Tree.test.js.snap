// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`it renders breaks 1`] = `
<p>
  paragraph
  <br />
  should break
  <br />
  should break
</p>
`;

exports[`it renders codeblock 1`] = `
<div
  className="codeblock-container"
>
  <pre
    style={
      Object {
        "MozHyphens": "none",
        "MozTabSize": "4",
        "OTabSize": "4",
        "WebkitHyphens": "none",
        "backgroundColor": "#fdf6e3",
        "borderRadius": "0.3em",
        "color": "#657b83",
        "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
        "hyphens": "none",
        "lineHeight": "1.5",
        "margin": ".5em 0",
        "msHyphens": "none",
        "overflow": "auto",
        "padding": "1em",
        "tabSize": "4",
        "textAlign": "left",
        "whiteSpace": "pre",
        "wordBreak": "normal",
        "wordSpacing": "normal",
        "wordWrap": "normal",
      }
    }
  >
    <code
      style={
        Object {
          "MozHyphens": "none",
          "MozTabSize": "4",
          "OTabSize": "4",
          "WebkitHyphens": "none",
          "color": "#657b83",
          "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
          "hyphens": "none",
          "lineHeight": "1.5",
          "msHyphens": "none",
          "tabSize": "4",
          "textAlign": "left",
          "whiteSpace": "pre",
          "wordBreak": "normal",
          "wordSpacing": "normal",
          "wordWrap": "normal",
        }
      }
    >
      <span
        className="token"
        style={
          Object {
            "color": "#859900",
          }
        }
      >
        const
      </span>
       
      <span
        className="token function-variable"
        style={
          Object {
            "color": "#b58900",
          }
        }
      >
        md2React
      </span>
       
      <span
        className="token operator"
        style={Object {}}
      >
        =
      </span>
       
      <span
        className="token parameter"
        style={Object {}}
      >
        mdText
      </span>
       
      <span
        className="token arrow operator"
        style={Object {}}
      >
        =&gt;
      </span>
      
  processor
    
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        .
      </span>
      <span
        className="token method property-access"
        style={
          Object {
            "color": "#b58900",
          }
        }
      >
        run
      </span>
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        (
      </span>
      processor
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        .
      </span>
      <span
        className="token method property-access"
        style={
          Object {
            "color": "#b58900",
          }
        }
      >
        parse
      </span>
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        (
      </span>
      mdText
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        )
      </span>
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        )
      </span>
      
    
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        .
      </span>
      <span
        className="token method property-access"
        style={
          Object {
            "color": "#b58900",
          }
        }
      >
        then
      </span>
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        (
      </span>
      <span
        className="token parameter"
        style={Object {}}
      >
        node
      </span>
       
      <span
        className="token arrow operator"
        style={Object {}}
      >
        =&gt;
      </span>
       renderer
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        .
      </span>
      <span
        className="token method property-access"
        style={
          Object {
            "color": "#b58900",
          }
        }
      >
        create
      </span>
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        (
      </span>
      <span
        className="token operator"
        style={Object {}}
      >
        &lt;
      </span>
      <span
        className="token maybe-class-name"
        style={Object {}}
      >
        Tree
      </span>
       node
      <span
        className="token operator"
        style={Object {}}
      >
        =
      </span>
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        {
      </span>
      node
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        }
      </span>
       
      <span
        className="token operator"
        style={Object {}}
      >
        /
      </span>
      <span
        className="token operator"
        style={Object {}}
      >
        &gt;
      </span>
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        )
      </span>
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        .
      </span>
      <span
        className="token method property-access"
        style={
          Object {
            "color": "#b58900",
          }
        }
      >
        toJSON
      </span>
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        (
      </span>
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        )
      </span>
      <span
        className="token"
        style={
          Object {
            "color": "#586e75",
          }
        }
      >
        )
      </span>
    </code>
  </pre>
</div>
`;

exports[`it renders headers 1`] = `
<section
  className="section1"
>
  <h1
    className="heading1"
  >
    Header1
  </h1>
  <section
    className="section2"
  >
    <h2
      className="heading2"
    >
      Header2
    </h2>
    <section
      className="section3"
    >
      <h3
        className="heading3"
      >
        Header3
      </h3>
      <section
        className="section4"
      >
        <h4
          className="heading4"
        >
          Header4
        </h4>
        <section
          className="section5"
        >
          <h5
            className="heading5"
          >
            Header5
          </h5>
          <section
            className="section6"
          >
            <h6
              className="heading6"
            >
              Header6
            </h6>
          </section>
        </section>
      </section>
    </section>
  </section>
</section>
`;

exports[`it renders inline code 1`] = `
<p>
  it should render 
  <code
    className="inline-code"
  >
    inline code
  </code>
   properly
</p>
`;

exports[`it renders paragraphs 1`] = `
Array [
  <p>
    paragraph 1
  </p>,
  <p>
    paragraph 2
  </p>,
]
`;

exports[`it renders ruby 1`] = `
<p>
  <ruby>
    振仮名
    <rt>
      ふりがな
    </rt>
  </ruby>
  のテスト。
</p>
`;

exports[`it renders table 1`] = `
<table>
  <thead>
    <tr>
      <th
        className="table-cell-left"
      >
        foo
      </th>
      <th
        className="table-cell-center"
      >
        bar
      </th>
      <th
        className="table-cell-null"
      >
        baz
      </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td
        className="table-cell-left"
      >
        qux
      </td>
      <td
        className="table-cell-center"
      >
        <ruby>
          quux
          <rt>
            nested
          </rt>
        </ruby>
      </td>
      <td
        className="table-cell-null"
      >
        corge
      </td>
    </tr>
  </tbody>
</table>
`;
